********ORDER PAYMENTS CONTROLLER*********
___________________________________________


const Razorpay = require("razorpay");
const crypto = require("crypto");
const Order = require("../models/Order");
const Product = require("../models/Product");
const Address = require("../models/Address");
const Notification = require("../models/Notification");
const mongoose = require("mongoose");
const sendEmail = require("../config/sendEmail");
const Coupon = require("../models/dicountCoupon");
const User = require("../models/User");
const AccountDetails = require("../models/accountDetails");

// Initialize Razorpay
const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY,
  key_secret: process.env.RAZORPAY_SECRET,
});

// Create order (customer initiates purchase)
const createOrder = async (req, res) => {
  console.log("req body : ", req.body);
  const { product_id, amount, addressId } = req.body;
  const customer_id = req.user.userId;

  if (!product_id || !amount || !addressId) {
    return res.status(400).json({
      success: false,
      message: "Product ID, amount, and addressId are required.",
    });
  }

  try {
    // Find product to get vendor_id
    const product = await Product.findById(product_id);
    if (!product) {
      return res.status(404).json({
        success: false,
        message: "Product not found.",
      });
    }

    const vendor_id = product.vendor;

    // Validate if the provided addressId belongs to the user
    const existingAddress = await Address.findOne({
      _id: addressId,
      userId: customer_id,
    });

    if (!existingAddress) {
      return res.status(404).json({
        success: false,
        message: "Address not found or does not belong to the user.",
      });
    }

    // Create order in Razorpay
    const razorpayOrder = await razorpay.orders.create({
      amount: amount * 100, // Converting to paise
      currency: "INR",
      receipt: `receipt_${Date.now()}`,
      payment_capture: 1,
    });

    // Save order to DB
    const newOrder = new Order({
      customer_id,
      vendor_id,
      product_id,
      razorpay_order_id: razorpayOrder.id,
      status: "pending",
      deliveryStatus: "pending",
      amount,
      deliveryAddress: addressId,
    });

    await newOrder.save();

    res.status(200).json({
      success: true,
      message: "Order created successfully.",
      data: razorpayOrder,
    });
  } catch (error) {
    console.error("Error creating order:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to create order.",
      error: error.message,
    });
  }
};

// âœ… Verify Payment
const verifyPayment = async (req, res) => {
  const { razorpay_order_id, razorpay_payment_id, razorpay_signature } =
    req.body;

  if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {
    return res.status(400).json({
      success: false,
      message: "Missing payment details.",
    });
  }

  try {
    // âœ… Verify payment signature
    const hmac = crypto.createHmac("sha256", process.env.RAZORPAY_SECRET);
    hmac.update(`${razorpay_order_id}|${razorpay_payment_id}`);
    const generatedSignature = hmac.digest("hex");

    if (generatedSignature !== razorpay_signature) {
      return res.status(400).json({
        success: false,
        message: "Invalid payment signature.",
      });
    }

    // âœ… Update order status to "paid"
    const order = await Order.findOneAndUpdate(
      { razorpay_order_id },
      { razorpay_payment_id, status: "paid" },
      { new: true }
    );

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Order not found.",
      });
    }

    // âœ… Fetch Product Details
    const product = await Product.findById(order.product_id).populate("vendor");
    if (!product) {
      return res
        .status(404)
        .json({ success: false, message: "Product not found." });
    }

    // âœ… Fetch Vendor Razorpay Sub-Account ID
    const vendorAccount = await AccountDetails.findOne({
      userId: product.vendor._id,
    });

    if (!vendorAccount || !vendorAccount.razorpayAccountId) {
      return res.status(400).json({
        success: false,
        message: "Vendor does not have a linked Razorpay account.",
      });
    }

    // ðŸ’¸ Transfer Amount to Vendor
    await razorpay.transfers.create({
      account: vendorAccount.razorpayAccountId, // ðŸ‘ˆ Vendor Razorpay Sub-Account
      amount: order.amount * 100, // in paise (â‚¹500 = 50000)
      currency: "INR",
      notes: {
        order_id: order._id.toString(),
        product: product.title,
      },
      // optional on_hold, on_hold_until
    });

    // âœ… Update Vendor's `totalSold` and `balance`
    const vendor = await User.findByIdAndUpdate(
      product.vendor._id,
      {
        $inc: {
          totalSold: 1,
          balance: order.amount, // Assuming `order.amount` is in INR (not paise)
        },
      },
      { new: true }
    );

    // âœ… Fetch Buyer (User) Details
    const buyer = await User.findById(order.customer_id);
    if (!buyer) {
      return res
        .status(404)
        .json({ success: false, message: "User not found." });
    }

    // âœ… Generate a unique coupon code
    const couponCode = `DISCOUNT-${Math.random()
      .toString(36)
      .substr(2, 6)
      .toUpperCase()}`;

    // âœ… Create & Assign Coupon to the User
    const newCoupon = new Coupon({
      code: couponCode,
      discount: 10, // Example: Flat 10% Discount
      assignedTo: buyer._id, // Assign to this buyer
      expiryDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days expiry
    });

    await newCoupon.save();

    // âœ… Send Email to the Buyer with Coupon Code
    const subject = "You Received a Discount Coupon!";
    const message = `
  <div style="background-color: #000000; color: #ffffff; padding: 30px; font-family: Arial, sans-serif; border-radius: 10px;">
    <h2 style="color: #ffffff; text-align: center;">ðŸŽ‰ Thank You for Your Purchase!</h2>
    
    <p style="font-size: 16px;">Hi <strong>${buyer.name}</strong>,</p>
    
    <p style="font-size: 16px;">
      We truly appreciate your order. As a thank-you gift, here's an exclusive coupon just for you:
    </p>

    <div style="background-color: #ffffff; color: #000000; padding: 20px; margin: 20px auto; max-width: 300px; border-radius: 8px; text-align: center;">
      <p style="font-size: 14px; margin-bottom: 5px;">Your Coupon Code</p>
      <p style="font-size: 24px; font-weight: bold; letter-spacing: 2px;">${couponCode}</p>
      <p style="font-size: 12px; color: #555555; margin-top: 10px;">Valid for 3 days only</p>
    </div>

    <p style="font-size: 14px; margin-top: 30px;">
      Use this code at checkout on your next purchase to enjoy a sweet discount!
    </p>

    <hr style="margin: 30px 0; border: none; border-top: 1px solid #444444;">

    <p style="font-size: 12px; color: #aaaaaa; text-align: center;">
      If you have any questions, just reply to this email â€” we're here to help!
    </p>
  </div>
`;

    await sendEmail(buyer.email, subject, message);

    // âœ… Send Email to Seller about Product Sold
    const sellerEmail = product.vendor.email;
    const sellerName = product.vendor.name;

    const sellerSubject = "ðŸŽ‰ Your Product Has Been Sold!";
    const sellerMessage = `
  <div style="background-color: #000000; color: #ffffff; padding: 30px; font-family: Arial, sans-serif; border-radius: 10px;">
    <h2 style="text-align: center; color: #ffffff;">ðŸŽ‰ Great News, ${sellerName}!</h2>

    <p style="font-size: 16px; margin-top: 20px;">
      Your product <strong>${product.title}</strong> has just been <span style="color: #00ff99;">sold successfully</span>! ðŸš€
    </p>

    <div style="background-color: #ffffff; color: #000000; padding: 20px; margin: 20px 0; border-radius: 8px;">
      <p style="margin: 0 0 10px 0;"><strong>Order ID:</strong> ${order._id}</p>
      <p style="margin: 0;"><strong>Amount Earned:</strong> â‚¹${order.amount}</p>
    </div>

    <p style="font-size: 14px;">
      Thank you for selling with us! Keep listing awesome products and growing your business.
    </p>

    <hr style="margin: 30px 0; border: none; border-top: 1px solid #444444;">

    <p style="font-size: 12px; color: #aaaaaa; text-align: center;">
      Need help or have questions? Just reply to this email â€” we're here for you!
    </p>
  </div>
`;

    await sendEmail(sellerEmail, sellerSubject, sellerMessage);

    // âœ… Create a notification for the user
    await Notification.create({
      userId: buyer._id,
      title: "Order Successful",
      message: `Your payment for order #${order._id} was successful. You have received a discount coupon!`,
    });

    res.status(200).json({
      success: true,
      message: "Payment verified, coupon assigned & email sent!",
      data: { order, coupon: newCoupon },
    });
  } catch (error) {
    console.error("Error verifying payment:", error.message);
    res.status(500).json({
      success: false,
      message: "Payment verification failed.",
      error: error.message,
    });
  }
};

// Get user orders (for customers)
const getUserOrders = async (req, res) => {
  const customer_id = req.user.userId;

  try {
    const orders = await Order.find({
      customer_id,
      deliveryStatus: { $ne: "cancelled" }, // exclude cancelled
    })
      .populate("product_id")
      .populate("deliveryAddress");

    if (orders.length === 0) {
      return res.status(404).json({
        success: false,
        message: "No orders found for this user.",
      });
    }

    res.status(200).json({
      success: true,
      message: "User orders fetched successfully.",
      data: orders,
    });
  } catch (error) {
    console.error("Error fetching user orders:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to fetch user orders.",
      error: error.message,
    });
  }
};

// Get seller (vendor) orders
const getSellerOrders = async (req, res) => {
  const vendor_id = req.user.userId; // Assuming vendor is authenticated and userId is attached to req.user

  try {
    // Find orders where the vendor_id matches the logged-in vendor
    const orders = await Order.find({
      vendor_id,
      status: "paid",
      deliveryStatus: { $ne: "cancelled" }, // exclude cancelled deliveries
    })

      .populate("product_id")
      .populate("deliveryAddress");

    if (!orders.length) {
      return res.status(404).json({
        success: false,
        message: "No orders found for this seller.",
      });
    }

    res.status(200).json({
      success: true,
      message: "Seller orders fetched successfully.",
      data: orders,
    });
  } catch (error) {
    console.error("Error fetching seller orders:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to fetch seller orders.",
      error: error.message,
    });
  }
};

// Update order status (by vendor)
const updateOrderStatus = async (req, res) => {
  const { orderId } = req.params;
  const { deliveryStatus } = req.body;
  const allowedStatuses = ["pending", "shipped", "delivered", "rejected"];

  if (!allowedStatuses.includes(deliveryStatus)) {
    return res.status(400).json({
      success: false,
      message: "Invalid status value.",
    });
  }

  try {
    const order = await Order.findById(orderId);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Order not found.",
      });
    }

    // Ensure only the vendor of the product can update status
    if (order.vendor_id.toString() !== req.user.userId) {
      return res.status(403).json({
        success: false,
        message: "Unauthorized: You can only update your own orders.",
      });
    }

    // Update order status
    order.deliveryStatus = deliveryStatus;
    await order.save();

    // Mark product as sold if order is delivered
    if (deliveryStatus === "delivered") {
      await Product.findByIdAndUpdate(order.product_id, { soldStatus: true });
    }

    // âœ… Create a notification for the user
    await Notification.create({
      userId: order.user_id, // Notify the buyer
      title: "Order Status Updated",
      message: `Your order #${order._id} status has been updated to '${deliveryStatus}'.`,
    });

    res.status(200).json({
      success: true,
      message: `Order status updated to '${deliveryStatus}'.`,
      data: order,
    });
  } catch (error) {
    console.error("Error updating order status:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to update order status.",
      error: error.message,
    });
  }
};

// Cancel order and process refund (by customer)
const cancelOrder = async (req, res) => {
  const { orderId } = req.params;
  const customer_id = req.user.userId; // Assuming user is authenticated

  try {
    // Find the order
    const order = await Order.findById(orderId);

    if (!order) {
      return res.status(404).json({
        success: false,
        message: "Order not found.",
      });
    }

    // Ensure only the customer who placed the order can cancel it
    if (order.customer_id.toString() !== customer_id) {
      return res.status(403).json({
        success: false,
        message: "Unauthorized: You can only cancel your own orders.",
      });
    }

    // Check if the order is already shipped/delivered
    if (["shipped", "delivered"].includes(order.deliveryStatus)) {
      return res.status(400).json({
        success: false,
        message:
          "Order cannot be canceled after it has been shipped or delivered.",
      });
    }

    // Process refund if payment was made
    if (order.status === "paid") {
      try {
        await razorpay.payments.refund(order.razorpay_payment_id, {
          amount: order.amount * 100, // Amount in paise (INR)
          speed: "normal",
        });
      } catch (refundError) {
        console.error("Error processing refund:", refundError.message);
        return res.status(500).json({
          success: false,
          message: "Failed to process refund.",
          error: refundError.message,
        });
      }
    }

    // Update order status to canceled
    order.status = "canceled";
    order.deliveryStatus = "cancelled";
    await order.save();

    // âœ… Create notification for the customer (buyer)
    await Notification.create({
      userId: order.customer_id,
      title: "Order Canceled",
      message: `Your order #${order._id} has been successfully canceled and a refund is being processed.`,
    });

    // âœ… Create notification for the vendor (seller)
    await Notification.create({
      userId: order.vendor_id,
      title: "Order Canceled by Customer",
      message: `Order #${order._id} has been canceled by the customer.`,
    });

    res.status(200).json({
      success: true,
      message: "Order canceled and refund processed successfully.",
      data: order,
    });
  } catch (error) {
    console.error("Error canceling order:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to cancel order.",
      error: error.message,
    });
  }
};

// Get all addresses of the logged-in user
const getUserAddresses = async (req, res) => {
  try {
    const userId = req.user.userId; // Assuming user ID is available from authentication middleware

    // Find all addresses belonging to the user
    const addresses = await Address.find({ userId });

    if (!addresses.length) {
      return res.status(404).json({
        success: false,
        message: "No existing addresses found for this user.",
      });
    }

    res.status(200).json({
      success: true,
      message: "User addresses fetched successfully.",
      data: addresses,
    });
  } catch (error) {
    console.error("Error fetching user addresses:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to fetch user addresses.",
      error: error.message,
    });
  }
};

const createUserAddress = async (req, res) => {
  try {
    const userId = req.user.userId; // Assuming user ID is available from authentication middleware
    const { fullName, phoneNumber, street, city, state, postalCode, country } =
      req.body;

    // Validate required fields
    if (
      !fullName ||
      !phoneNumber ||
      !street ||
      !city ||
      !state ||
      !postalCode ||
      !country
    ) {
      return res.status(400).json({
        success: false,
        message:
          "All address fields (fullName, phoneNumber, street, city, state, postalCode, country) are required.",
      });
    }

    // Create new address
    const newAddress = new Address({
      userId,
      fullName,
      phoneNumber,
      street,
      city,
      state,
      postalCode,
      country,
    });

    // Save to database
    const savedAddress = await newAddress.save();

    res.status(201).json({
      success: true,
      message: "Address added successfully.",
      data: savedAddress,
    });
  } catch (error) {
    console.error("Error creating user address:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to add address.",
      error: error.message,
    });
  }
};

const updateUserAddress = async (req, res) => {
  try {
    const userId = req.user.userId; // Authenticated user's ID
    const addressId = req.params.addressId; // Address ID from request params
    const { fullName, phoneNumber, street, city, state, postalCode, country } =
      req.body;

    // Find the address and ensure it belongs to the user
    const address = await Address.findOne({ _id: addressId, userId });

    if (!address) {
      return res.status(404).json({
        success: false,
        message: "Address not found or does not belong to the user.",
      });
    }

    // Update fields if provided in request body
    if (fullName) address.fullName = fullName;
    if (phoneNumber) address.phoneNumber = phoneNumber;
    if (street) address.street = street;
    if (city) address.city = city;
    if (state) address.state = state;
    if (postalCode) address.postalCode = postalCode;
    if (country) address.country = country;

    // Save updated address
    const updatedAddress = await address.save();

    res.status(200).json({
      success: true,
      message: "Address updated successfully.",
      data: updatedAddress,
    });
  } catch (error) {
    console.error("Error updating address:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to update address.",
      error: error.message,
    });
  }
};

const deleteUserAddress = async (req, res) => {
  try {
    const userId = req.user.userId; // Authenticated user's ID
    const addressId = req.params.addressId; // Address ID from request params

    // Find and delete the address
    const address = await Address.findOneAndDelete({ _id: addressId, userId });

    if (!address) {
      return res.status(404).json({
        success: false,
        message: "Address not found or does not belong to the user.",
      });
    }

    res.status(200).json({
      success: true,
      message: "Address deleted successfully.",
    });
  } catch (error) {
    console.error("Error deleting address:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to delete address.",
      error: error.message,
    });
  }
};

const getVendorEarnings = async (req, res) => {
  try {
    const vendorId = new mongoose.Types.ObjectId(req.user.userId); // Convert to ObjectId

    // Get current date
    const now = new Date();

    // Get start of the current week (Monday)
    const startOfWeek = new Date(now);
    startOfWeek.setDate(now.getDate() - now.getDay() + 1); // Adjust to Monday
    startOfWeek.setHours(0, 0, 0, 0);

    // Get start of the current month
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    // Function to calculate earnings with a date filter
    const calculateEarnings = async (startDate) => {
      const earnings = await Order.aggregate([
        {
          $match: {
            vendor_id: vendorId, // Match vendor
            status: "paid", // Order must be paid
            deliveryStatus: "delivered", // Order must be delivered
            createdAt: { $gte: startDate }, // Filter by date
          },
        },
        {
          $group: {
            _id: null,
            totalAmount: { $sum: { $toDouble: "$amount" } }, // Ensure it's a number
          },
        },
      ]);

      console.log(`Orders found from ${startDate}:`, earnings); // Debugging

      return earnings.length > 0 ? earnings[0].totalAmount : 0;
    };

    // Fetch earnings
    const totalEarnings = await calculateEarnings(new Date(0)); // All-time earnings
    const weeklyEarnings = await calculateEarnings(startOfWeek);
    const monthlyEarnings = await calculateEarnings(startOfMonth);

    res.status(200).json({
      success: true,
      message: "Vendor earnings fetched successfully.",
      totalEarnings,
      weeklyEarnings,
      monthlyEarnings,
    });
  } catch (error) {
    console.error("Error fetching vendor earnings:", error.message);
    res.status(500).json({
      success: false,
      message: "Failed to fetch vendor earnings.",
      error: error.message,
    });
  }
};

module.exports = {
  createOrder,
  verifyPayment,
  getUserOrders,
  getSellerOrders,
  updateOrderStatus,
  cancelOrder,
  createUserAddress,
  getUserAddresses,
  updateUserAddress,
  deleteUserAddress,
  getVendorEarnings,
};
